@page "/ProductsPage";
@inject HttpClient Http
@using PracticeWeb.Models;
@using PracticeWeb.Service.ProductService;
@using PracticeWeb.Service.ProviderService;
@using System.Linq;
@using System.Xml.Linq;
@inject NotificationService NotificationService
@inject DialogService DialogService

@inject GetProductService GetProd
@inject PutProductService PutProd
@inject DeleteProductService DelProd
@inject AddProductService AddProd
@inject NavigationManager Navigation
@inject GetProvToIDService GetProv
@inject GetXMLToIdService GetXMLs

@using Microsoft.JSInterop
@using System.Text.Json

@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>User Page</PageTitle>


 <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">

            <h1>Product Information</h1>
            <RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap" Style="margin-top: 10px; margin-bottom: 15px;">
                    <RadzenButton Click= "AddProdPage" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click = "ShowInlineDialog" Icon="delete" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click= "PutProdPage" Icon="Autorenew" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click = "ShowXmlDialog" Text="ShowXML" ButtonStyle="ButtonStyle.Primary" />
                </RadzenStack>
            </RadzenRow>
            <RadzenRow>
                <RadzenDataGrid ColumnWidth="200px" Colum AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@prods" @bind-Value="SelectedProduct" style="z-index: 0;">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(Product.id)" Filterable="false"  Title="Id" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="@nameof(Product.name)" Title="name" Width="160px" />
                        <RadzenDataGridColumn Property="@nameof(Product.count)" Title="count" Width="160px"/>
                    </Columns>
                </RadzenDataGrid>
            </RadzenRow>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <h1>Providers</h1>
            <RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap" Style="margin-top: 10px; margin-bottom: 15px;">
                    <RadzenButton Click=@(args => OnClick("Добавить провайдера")) Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click=@(args => OnClick("Удалить провайдера")) Icon="delete" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click=@(args => OnClick("Изменить провайдера")) Icon="Autorenew" ButtonStyle="ButtonStyle.Primary" />
                </RadzenStack>
            </RadzenRow>
            <RadzenRow>
                <RadzenStack Gap="1rem">
                    
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="SelectedProduct?.FirstOrDefault()?.Provider" style="z-index: 0;">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(Provider.id)" Filterable="false" Title="id Provider" Width="40px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn Property="@nameof(Provider.name)" Title="name" Width="100px" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>
            </RadzenRow>
        </RadzenColumn>
    </RadzenRow>


@code{
    IList<Product>? SelectedProduct { get; set; }
    IList<Product>? products = new List<Product>{}; 
    protected IEnumerable<Product>? prods;
    protected IEnumerable<Product>? XMLs;

    protected IEnumerable<Provider>? providers;
        
    //для диалогового окна

    async Task ShowXmlDialog(){
        XMLs = await GetXMLs.GetProductXMLList(SelectedProduct.FirstOrDefault().id);

        
        var result = await DialogService.OpenAsync($"Пользователь №{SelectedProduct.FirstOrDefault().id}", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="XMLs">
                        <Columns>
                        <RadzenDataGridColumn Property="@nameof(Product.id)" Filterable="false"  Title="Id" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="@nameof(Product.name)" Title="name" Width="160px" />
                        <RadzenDataGridColumn Property="@nameof(Product.count)" Title="count" Width="160px"/>
                        </Columns>
                     </RadzenDataGrid> 
        </RadzenStack>);
    }

    async Task AddProdPage()
    {
        string productName = "";
        string productCount = "";
        var result = await DialogService.OpenAsync("Добавление продукта", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenTextBox @bind-Value="productName" Placeholder="Введите название продукта" />
            <RadzenTextBox @bind-Value="productCount"Placeholder="Введите количество" />
            <RadzenButton Text="Да" Click="@(() => { AddProds(productName,productCount); ReloadPage(); ds.Close(true); })" ButtonStyle="ButtonStyle.Success"/>
        </RadzenStack>);
    }
    async Task PutProdPage()
    {
        string productName = "";
        string productCount = "";
        string id = "";
        
        var result = await DialogService.OpenAsync("Изменение продукта", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenTextBox @bind-Value="productName" Placeholder="Введите id" />
            <RadzenTextBox @bind-Value="productName" Placeholder="Введите название продукта" />
            <RadzenTextBox @bind-Value="productCount"Placeholder="Введите количество" />
            <RadzenButton Text="Да" Click="@(() => { PutProds(id,productName,productCount); ReloadPage(); ds.Close(true); })" ButtonStyle="ButtonStyle.Success"/>
        </RadzenStack>);
    }

    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Удаление продукта", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Уверены, что хотите удалить данную строку?</p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="SelectedProduct">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(Product.id)" Filterable="false" Title="Id"  Width="80px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn Property="@nameof(Product.name)" Title="Name" Width="160px" />
                            <RadzenDataGridColumn Property="@nameof(Product.count)" Title="Surname" Width="160px"/>
                        </Columns>
                     </RadzenDataGrid> 
                </RadzenStack>
            </RadzenStack> 
            <RadzenButton Text="Да" Click="@(() => { DeleteProd(SelectedProduct.FirstOrDefault().id); ReloadPage(); ds.Close(true); })" ButtonStyle="ButtonStyle.Success"/>
            <RadzenButton Text="Нет" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>);
    }

    protected override async Task OnInitializedAsync()
    {
            prods = await GetProd.GetProductList();

            foreach(var c in prods){
                providers = await GetProv.GetProvToIdList(c.id);

                if(providers != null){
                    c.Provider = providers.ToList<Provider>();
                }
                products.Add(c);
            }
        SelectedProduct = new List<Product>(){products.FirstOrDefault()}; 
    }

    
   private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Нажата кнопка", Detail = text });
    }
    private async Task DeleteProd(int id){
        await DelProd.DeleteProdList(id);
    }
    private async Task AddProds(string name, string count){
        await AddProd.AddProductList(name, Convert.ToInt32(count));
    }
    private async Task PutProds(string id,string name, string count){
        await PutProd.PutProdList(name, Convert.ToInt32(id), Convert.ToInt32(count));
    }
    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}